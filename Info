Vitesse :
	Normale
	1 seconde = 1 tour<=>3 jours

	Rapide (x2)
	500ms = 1 tour<=>3jours

	Tr√®s rapide (x4)
	250ms = 1 tour<=>3jours

	Ultra rapide
	500ms = 10 tours => probablement pas utile

	Saut
	saut de x tours dans le futur
	pas d'animation / actualisation /etc. avant la fin des calculs
	=> pas tr√®s esth√©tique, √† voir



Migration:

	Rajouter compteur de morts, si taux > x% sur Y tours, tentative
	de migration.
	
	ET/OU
	
	Evaluer les ressources (nourriture, eau, chaleur etc.) et 
	pr√©dateurs pr√©sents, et d√©terminer un taux de mortalit√© ?
	De sorte que si taux pr√©c√©dent << taux calcul√©, changement
	d'environnement (avec "<<" = "tr√®s inf√©rieur", quelque
	chose comme "10 << 25").

AGE:
	Exprim√© en jours.


CATASTROPHES:
	-Incendie : Diminution des ressources (type arbre, herbe etc..), augmentation √† terme des min√©raux
	-D√©luge : 40 jours et 40 nuits de pluie, cr√©ation d'un pnj secondaire "No√©" qui sauvera un couple de chaque esp√®ce.
	-Ast√©ro√Øde : Tue des esp√®ces ( en masse ), apporte de nouvelles ressources ( dont la kryptonite ), baisse de la temp√©rature 
	-Pluie acide : Appauvrit / Pourrit les sols.

Agilit√©:

	Carnivore: 
		-Chasse (augmente le taux de mortalit√© des proies)
				
	Herbivore:
		-Fuite (augmente le taux de survie des proies / diminue le taux de mortalit√©)
		
	Commun:
		-Vitesse de d√©placement (mdr)
		
Besoin: 
	-Faim
	-Soif
	-Temp√©rature requise pour √©viter l'hypothermie/l'hyperthermie
	-

CHANGEMENT POUR LA GESTION DES BESOINS:
Chaque espËce dÈmarre avec la moitiÈ de ce qu'elle peut stocker au maximum
A chaque tour, selon ses actions, sa quantitÈ de ressources diminue.
Une fois ‡ 0, l'animal perd 1 point de vie. Quand sa vie est ‡ 0, il meurt.

CIRCLE TEST:

				
				c1 = new Circle( new Point<Double>( 60.0d,
						10.0d ),
						20.0d );
				c1.setColor( Color.RED );
				c2 = new Circle( new Point<Double>( 50.0d,
					50.0d ),
					10.0d );
				c2.setColor( Color.BLUE );
				
				super.addMouseMotionListener( new MouseMotionListener( ) {

					Circle s;
					
					public MouseMotionListener init( Circle s )
					{
						this.s = s;
						
						return this;
					}

					@Override
					public void mouseDragged( MouseEvent arg0 )
					{

					}

					@Override
					public void mouseMoved( MouseEvent arg0 )
					{
						s.setPosition( new Point<Double>( (double)arg0.getX( ),
							(double)arg0.getY( ) ) );
					}
					
				}.init( c1 ) );